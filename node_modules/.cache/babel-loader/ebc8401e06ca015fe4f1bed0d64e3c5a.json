{"ast":null,"code":"const base64ToFile = (base64, mime = \"image/jpeg\") => {\n  const byteString = window.atob(base64);\n  const content = [];\n\n  for (let i = 0; i < byteString.length; i++) {\n    content[i] = byteString.charCodeAt(i);\n  }\n\n  return new window.Blob([new Uint8Array(content)], {\n    type: mime\n  });\n};\n\nconst imageToCanvas = (width, height, orientation) => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  canvas.width = width;\n  canvas.height = height;\n  return image => {\n    if (!orientation || orientation > 8) {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    }\n\n    if (orientation > 4) {\n      canvas.width = height;\n      canvas.height = width;\n    }\n\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        context.translate(width, 0);\n        context.scale(-1, 1);\n        break;\n\n      case 3:\n        // 180° rotate left\n        context.translate(width, height);\n        context.rotate(Math.PI);\n        break;\n\n      case 4:\n        // vertical flip\n        context.translate(0, height);\n        context.scale(1, -1);\n        break;\n\n      case 5:\n        // vertical flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.scale(1, -1);\n        break;\n\n      case 6:\n        // 90° rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(0, -height);\n        break;\n\n      case 7:\n        // horizontal flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(width, -height);\n        context.scale(-1, 1);\n        break;\n\n      case 8:\n        // 90° rotate left\n        context.rotate(-0.5 * Math.PI);\n        context.translate(-width, 0);\n        break;\n    }\n\n    if (orientation > 4) {\n      context.drawImage(image, 0, 0, canvas.height, canvas.width);\n    } else {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    }\n\n    return canvas;\n  };\n};\n\nconst canvasToBase64 = (canvas, quality = 0.75) => {\n  // in order to compress the final image format has to be jpeg\n  const base64 = canvas.toDataURL(\"image/jpeg\", quality);\n  return base64;\n};\n\nconst size = size => ({\n  KB: size / 1000,\n  MB: size / (1000 * 1000)\n});\n\nexport default {\n  base64ToFile,\n  imageToCanvas,\n  canvasToBase64,\n  size\n};","map":{"version":3,"sources":["C:/Users/tgound/Desktop/NCKH/Web1/frontend/node_modules/compress.js/src/core/converter.js"],"names":["base64ToFile","base64","mime","byteString","window","atob","content","i","length","charCodeAt","Blob","Uint8Array","type","imageToCanvas","width","height","orientation","canvas","document","createElement","context","getContext","image","drawImage","translate","scale","rotate","Math","PI","canvasToBase64","quality","toDataURL","size","KB","MB"],"mappings":"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","sourcesContent":["const base64ToFile = (base64, mime = \"image/jpeg\") => {\n  const byteString = window.atob(base64);\n  const content = [];\n  for (let i = 0; i < byteString.length; i++) {\n    content[i] = byteString.charCodeAt(i);\n  }\n  return new window.Blob([new Uint8Array(content)], { type: mime });\n};\n\nconst imageToCanvas = (width, height, orientation) => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  canvas.width = width;\n  canvas.height = height;\n\n  return (image) => {\n    if (!orientation || orientation > 8) {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    }\n    if (orientation > 4) {\n      canvas.width = height;\n      canvas.height = width;\n    }\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        context.translate(width, 0);\n        context.scale(-1, 1);\n        break;\n      case 3:\n        // 180° rotate left\n        context.translate(width, height);\n        context.rotate(Math.PI);\n        break;\n      case 4:\n        // vertical flip\n        context.translate(0, height);\n        context.scale(1, -1);\n        break;\n      case 5:\n        // vertical flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.scale(1, -1);\n        break;\n      case 6:\n        // 90° rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(0, -height);\n        break;\n      case 7:\n        // horizontal flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(width, -height);\n        context.scale(-1, 1);\n        break;\n      case 8:\n        // 90° rotate left\n        context.rotate(-0.5 * Math.PI);\n        context.translate(-width, 0);\n        break;\n    }\n    if (orientation > 4) {\n      context.drawImage(image, 0, 0, canvas.height, canvas.width);\n    } else {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    }\n    return canvas;\n  };\n};\n\nconst canvasToBase64 = (canvas, quality = 0.75) => {\n  // in order to compress the final image format has to be jpeg\n  const base64 = canvas.toDataURL(\"image/jpeg\", quality);\n  return base64;\n};\n\nconst size = (size) => ({\n  KB: size / 1000,\n  MB: size / (1000 * 1000),\n});\n\nexport default { base64ToFile, imageToCanvas, canvasToBase64, size };\n"]},"metadata":{},"sourceType":"module"}