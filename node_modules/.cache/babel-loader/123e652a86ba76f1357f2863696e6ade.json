{"ast":null,"code":"const load = src => {\n  return new Promise((resolve, reject) => {\n    const img = new window.Image();\n    img.addEventListener(\"load\", () => resolve(img), false);\n    img.addEventListener(\"error\", reject, false);\n    img.src = src;\n  });\n};\n/*\n * Resize the image based on the given height or width boundary.\n * Auto resize based on aspect ratio.\n **/\n\n\nconst resize = (targetWidth, targetHeight) => {\n  return (width, height) => {\n    if (!targetWidth && !targetHeight) return {\n      width,\n      height\n    };\n    const originalAspectRatio = width / height;\n    const targetAspectRatio = targetWidth / targetHeight;\n    let outputWidth, outputHeight;\n\n    if (originalAspectRatio > targetAspectRatio) {\n      outputWidth = Math.min(width, targetWidth);\n      outputHeight = outputWidth / originalAspectRatio;\n    } else {\n      outputHeight = Math.min(height, targetHeight);\n      outputWidth = outputHeight * originalAspectRatio;\n    }\n\n    return {\n      width: outputWidth,\n      height: outputHeight\n    };\n  };\n};\n\nexport default {\n  load,\n  resize\n};","map":{"version":3,"sources":["C:/Users/tgound/Desktop/NCKH/Web1/frontend/node_modules/compress.js/src/core/image.js"],"names":["load","src","Promise","resolve","reject","img","window","Image","addEventListener","resize","targetWidth","targetHeight","width","height","originalAspectRatio","targetAspectRatio","outputWidth","outputHeight","Math","min"],"mappings":"AAAA,MAAMA,IAAI,GAAIC,GAAD,IAAS;AACpB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,KAAX,EAAZ;AACAF,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,MAArB,EAA6B,MAAML,OAAO,CAACE,GAAD,CAA1C,EAAiD,KAAjD;AACAA,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,OAArB,EAA8BJ,MAA9B,EAAsC,KAAtC;AACAC,IAAAA,GAAG,CAACJ,GAAJ,GAAUA,GAAV;AACD,GALM,CAAP;AAMD,CAPD;AAQA;AACA;AACA;AACA;;;AACA,MAAMQ,MAAM,GAAG,CAACC,WAAD,EAAcC,YAAd,KAA+B;AAC5C,SAAO,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxB,QAAI,CAACH,WAAD,IAAgB,CAACC,YAArB,EAAmC,OAAO;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP;AAEnC,UAAMC,mBAAmB,GAAGF,KAAK,GAAGC,MAApC;AACA,UAAME,iBAAiB,GAAGL,WAAW,GAAGC,YAAxC;AAEA,QAAIK,WAAJ,EAAiBC,YAAjB;;AAEA,QAAIH,mBAAmB,GAAGC,iBAA1B,EAA6C;AAC3CC,MAAAA,WAAW,GAAGE,IAAI,CAACC,GAAL,CAASP,KAAT,EAAgBF,WAAhB,CAAd;AACAO,MAAAA,YAAY,GAAGD,WAAW,GAAGF,mBAA7B;AACD,KAHD,MAGO;AACLG,MAAAA,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASN,MAAT,EAAiBF,YAAjB,CAAf;AACAK,MAAAA,WAAW,GAAGC,YAAY,GAAGH,mBAA7B;AACD;;AAED,WAAO;AAAEF,MAAAA,KAAK,EAAEI,WAAT;AAAsBH,MAAAA,MAAM,EAAEI;AAA9B,KAAP;AACD,GAjBD;AAkBD,CAnBD;;AAqBA,eAAe;AAAEjB,EAAAA,IAAF;AAAQS,EAAAA;AAAR,CAAf","sourcesContent":["const load = (src) => {\n  return new Promise((resolve, reject) => {\n    const img = new window.Image();\n    img.addEventListener(\"load\", () => resolve(img), false);\n    img.addEventListener(\"error\", reject, false);\n    img.src = src;\n  });\n};\n/*\n * Resize the image based on the given height or width boundary.\n * Auto resize based on aspect ratio.\n **/\nconst resize = (targetWidth, targetHeight) => {\n  return (width, height) => {\n    if (!targetWidth && !targetHeight) return { width, height };\n\n    const originalAspectRatio = width / height;\n    const targetAspectRatio = targetWidth / targetHeight;\n\n    let outputWidth, outputHeight;\n\n    if (originalAspectRatio > targetAspectRatio) {\n      outputWidth = Math.min(width, targetWidth);\n      outputHeight = outputWidth / originalAspectRatio;\n    } else {\n      outputHeight = Math.min(height, targetHeight);\n      outputWidth = outputHeight * originalAspectRatio;\n    }\n\n    return { width: outputWidth, height: outputHeight };\n  };\n};\n\nexport default { load, resize };\n"]},"metadata":{},"sourceType":"module"}