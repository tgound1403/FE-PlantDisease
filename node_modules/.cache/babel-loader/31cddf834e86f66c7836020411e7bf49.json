{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tgound\\\\Desktop\\\\NCKH\\\\Web1\\\\frontend\\\\src\\\\pages\\\\ForumPage\\\\PostModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { FaRegTimesCircle } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport \"./PostModal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require(\"axios\");\n\nconst Compress = require('compress.js').default;\n\nfunction PostModal({\n  closeModal,\n  initialText = \"hi\"\n}) {\n  _s();\n\n  // Set up storing image\n  // Open Explorer\n  const inputFile = useRef(null);\n  const [imageToPreview, setImageToPreview] = useState();\n  const {\n    currentUser\n  } = useSelector(state => state.user);\n\n  const handlePreviewImage = e => {\n    const file = e.target.files[0];\n    setImageToPreview(file);\n    file.preview = URL.createObjectURL(file);\n  };\n\n  async function resizeImageFn(file) {\n    const compress = new Compress();\n    const resizedImage = await compress.compress([file], {\n      size: 2,\n      // the max size in MB, defaults to 2MB\n      quality: 1,\n      // the quality of the image, max is 1,\n      maxWidth: 300,\n      // the max width of the output image, defaults to 1920px\n      maxHeight: 300,\n      // the max height of the output image, defaults to 1920px\n      resize: true // defaults to true, set false if you do not want to resize the image width and height\n\n    });\n    const img = resizedImage[0];\n    const base64str = img.data;\n    const imgExt = img.ext;\n    const resizedFile = Compress.convertBase64ToFile(base64str, imgExt);\n    return resizedFile;\n  }\n\n  let onFileChange = async e => {\n    const imageFile = e.target.files[0];\n    setImageToPreview(imageFile);\n    const resizedImage = await resizeImageFn(imageFile);\n    setImageToUpload(imageFile);\n    setImageToUpload(resizedImage);\n  };\n\n  useEffect(() => {\n    return () => {\n      imageToPreview && URL.revokeObjectURL(imageToPreview.preview);\n    };\n  }, [imageToPreview]);\n  const [imageToUpload, setImageToUpload] = useState();\n  const [postData, setPostData] = useState({\n    creatorAvatar: \"https://wallpaper.dog/large/5439024.jpg\",\n    creator: currentUser.name,\n    createTime: Date.now(),\n    status: \"\",\n    image: \"\"\n  });\n\n  const handleChange = e => {\n    let newData = { ...postData\n    };\n    newData[e.target.id] = e.target.value;\n    setPostData(newData);\n  };\n\n  const submit = () => {\n    console.log(postData);\n    const request = new FormData();\n\n    for (let key in postData) {\n      request.append(key, postData[key]);\n    }\n\n    request.append(\"image\", imageToUpload);\n    axios({\n      method: \"POST\",\n      url: \"/api/post-with-img\",\n      data: request,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(res => {\n      console.log(\"post succeed\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const [text, setText] = useState(initialText);\n  const isTextareaDisable = postData.status.length === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forum-modal-container \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-title\",\n          children: \" T\\u1EA1o b\\xE0i vi\\u1EBFt \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            closeModal();\n          },\n          children: /*#__PURE__*/_jsxDEV(FaRegTimesCircle, {\n            className: \"exit-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"status\",\n          type: \"text\",\n          value: postData.status,\n          onChange: e => {\n            handleChange(e);\n            setText(e.target.value);\n          },\n          className: \"body-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), imageToUpload && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageToPreview.preview,\n          alt: \"preview for upload\",\n          className: \"img-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"function-modal\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"hint\",\n            children: \" Th\\xEAm v\\xE0o b\\xE0i vi\\u1EBFt c\\u1EE7a b\\u1EA1n \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-img-btn\",\n            id: \"image\" // onClick={onButtonClick}\n            ,\n            onChange: handlePreviewImage,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"image\" // className=\"form-control-file\"\n              ,\n              ref: inputFile,\n              onChange: e => {\n                onFileChange(e);\n                handleChange(e);\n              } // style={{\n              //   display: \"none\",\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-btn\",\n          disabled: isTextareaDisable,\n          onClick: () => {\n            // onSubmit();\n            submit();\n            closeModal();\n          } // handleSubmit={onSubmit}\n          ,\n          children: \"\\u0110\\u0103ng b\\xE0i\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostModal, \"q9nbNAcw9hQ3bth+FZFUleJsI6Q=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostModal;\nexport default PostModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostModal\");","map":{"version":3,"sources":["C:/Users/tgound/Desktop/NCKH/Web1/frontend/src/pages/ForumPage/PostModal.js"],"names":["React","useEffect","useRef","useState","FaRegTimesCircle","useSelector","axios","require","Compress","default","PostModal","closeModal","initialText","inputFile","imageToPreview","setImageToPreview","currentUser","state","user","handlePreviewImage","e","file","target","files","preview","URL","createObjectURL","resizeImageFn","compress","resizedImage","size","quality","maxWidth","maxHeight","resize","img","base64str","data","imgExt","ext","resizedFile","convertBase64ToFile","onFileChange","imageFile","setImageToUpload","revokeObjectURL","imageToUpload","postData","setPostData","creatorAvatar","creator","name","createTime","Date","now","status","image","handleChange","newData","id","value","submit","console","log","request","FormData","key","append","method","url","headers","then","res","catch","err","text","setText","isTextareaDisable","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { FaRegTimesCircle } from \"react-icons/fa\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./PostModal.css\";\r\nconst axios = require(\"axios\");\r\nconst Compress = require('compress.js').default\r\n\r\nfunction PostModal({ closeModal, initialText = \"hi\" }) {\r\n  // Set up storing image\r\n  // Open Explorer\r\n  const inputFile = useRef(null);\r\n  const [imageToPreview, setImageToPreview] = useState();\r\n  const { currentUser } = useSelector(state => state.user)\r\n\r\n  const handlePreviewImage = (e) => {\r\n    const file = e.target.files[0];\r\n    setImageToPreview(file);\r\n    file.preview = URL.createObjectURL(file);\r\n  };\r\n  async function resizeImageFn(file) {\r\n    const compress = new Compress()\r\n\r\n    const resizedImage = await compress.compress([file], {\r\n      size: 2, // the max size in MB, defaults to 2MB\r\n      quality: 1, // the quality of the image, max is 1,\r\n      maxWidth: 300, // the max width of the output image, defaults to 1920px\r\n      maxHeight: 300, // the max height of the output image, defaults to 1920px\r\n      resize: true // defaults to true, set false if you do not want to resize the image width and height\r\n    })\r\n    const img = resizedImage[0];\r\n    const base64str = img.data\r\n    const imgExt = img.ext\r\n    const resizedFile = Compress.convertBase64ToFile(base64str, imgExt)\r\n    return resizedFile;\r\n  }\r\n\r\n  let onFileChange = async (e) => {\r\n    const imageFile = e.target.files[0];\r\n    setImageToPreview(imageFile);\r\n    const resizedImage = await resizeImageFn(imageFile);\r\n    setImageToUpload(imageFile);\r\n    setImageToUpload(resizedImage);\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      imageToPreview && URL.revokeObjectURL(imageToPreview.preview);\r\n    };\r\n  }, [imageToPreview]);\r\n\r\n  const [imageToUpload, setImageToUpload] = useState();\r\n\r\n  const [postData, setPostData] = useState({\r\n    creatorAvatar: \"https://wallpaper.dog/large/5439024.jpg\",\r\n    creator: currentUser.name,\r\n    createTime: Date.now(),\r\n    status: \"\",\r\n    image: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    let newData = { ...postData };\r\n    newData[e.target.id] = e.target.value;\r\n    setPostData(newData);\r\n  };\r\n\r\n  const submit = () => {\r\n    console.log(postData);\r\n    const request = new FormData();\r\n\r\n    for (let key in postData) {\r\n      request.append(key, postData[key]);\r\n    }\r\n    request.append(\"image\", imageToUpload);\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"/api/post-with-img\",\r\n      data: request,\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    })\r\n      .then((res) => {\r\n        console.log(\"post succeed\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const [text, setText] = useState(initialText);\r\n  const isTextareaDisable = postData.status.length === 0;\r\n\r\n  return (\r\n    <div className=\"background\">\r\n      <div className=\"forum-modal-container \">\r\n        <div className=\"top-modal\">\r\n          <div className=\"modal-title\"> Tạo bài viết </div>\r\n          <div\r\n            onClick={() => {\r\n              closeModal();\r\n            }}\r\n          >\r\n            <FaRegTimesCircle className=\"exit-btn\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"body-modal\">\r\n          <textarea\r\n            id=\"status\"\r\n            type=\"text\"\r\n            value={postData.status}\r\n            onChange={(e) => {\r\n              handleChange(e);\r\n              setText(e.target.value)\r\n            }}\r\n            className=\"body-box\"\r\n          />\r\n          {imageToUpload && (\r\n            <img\r\n              src={imageToPreview.preview}\r\n              alt=\"preview for upload\"\r\n              className=\"img-input\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"bottom-modal\">\r\n          <div className=\"function-modal\">\r\n            <p className=\"hint\"> Thêm vào bài viết của bạn </p>\r\n            <div\r\n              className=\"add-img-btn\"\r\n              id='image'\r\n              // onClick={onButtonClick}\r\n              onChange={handlePreviewImage}\r\n            >\r\n              {/* <FaRegFileImage\r\n                alt=\"add image\"\r\n                className=\"add-img\"\r\n                onClick={onButtonClick}\r\n              > */}\r\n              <input\r\n                type=\"file\"\r\n                id=\"image\"\r\n                // className=\"form-control-file\"\r\n                ref={inputFile}\r\n                onChange={(e) => {\r\n                  onFileChange(e);\r\n                  handleChange(e);\r\n                }}\r\n              // style={{\r\n              //   display: \"none\",\r\n              // }}\r\n              />\r\n              {/* </FaRegFileImage> */}\r\n            </div>\r\n          </div>\r\n          <button\r\n            className=\"post-btn\"\r\n            disabled={isTextareaDisable}\r\n            onClick={() => {\r\n              // onSubmit();\r\n              submit();\r\n              closeModal();\r\n            }}\r\n          // handleSubmit={onSubmit}\r\n          >\r\n            Đăng bài\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostModal;\r\n"]},"metadata":{},"sourceType":"module"}